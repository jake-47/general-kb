#!/bin/bash
# Script to build documentation for both external and internal versions

set -e

# Default build type is external
BUILD_TYPE=${1:-"external"}
OUTPUT_DIR=${2:-"site"}
ENV_TYPE=${3:-"production"}

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check for markdownlint-cli if installed
if command_exists markdownlint; then
    echo "Running markdownlint to check Markdown files..."
    if markdownlint docs/; then
        echo "✅ Markdown files passed linting checks."
    else
        echo "⚠️ Markdown linting found issues. Please fix them for better consistency."
        echo "   To automatically fix some issues, run: markdownlint --fix docs/"
        echo "   Continuing with build process..."
    fi
else
    echo "ℹ️ markdownlint-cli not found. Skipping Markdown linting."
    echo "   To enable linting, install markdownlint-cli with: npm install -g markdownlint-cli"
fi

echo "Building documentation for: $BUILD_TYPE in $ENV_TYPE environment"

# Create a env-config.js file with environment variables
mkdir -p docs/assets/javascripts/config
echo "// Environment configuration - autogenerated by build script
window.DOCS_ENV = {
  environment: '$ENV_TYPE',
  isInternal: $([[ "$BUILD_TYPE" == "internal" ]] && echo "true" || echo "false"),
  buildDate: '$(date -u +"%Y-%m-%dT%H:%M:%SZ")',
  buildType: '$BUILD_TYPE'
};" > docs/assets/javascripts/config/env-config.js

if [ "$BUILD_TYPE" == "internal" ]; then
    echo "Building internal documentation..."
    if [ "$4" == "serve" ]; then
        # Check if we should use versioning for local serve
        if [ "$5" == "versioned" ]; then
            PORT=${6:-8000}
            SERVER_ADDR=${7:-127.0.0.1}
            echo "Starting versioned documentation server on $SERVER_ADDR:$PORT..."
            # Initialize versioning if .mike directory doesn't exist
            if [ ! -d ".mike" ]; then
                echo "Initializing versioning..."
                mike deploy --push "latest"
            fi
            mike serve -a $SERVER_ADDR:$PORT
        else
            PORT=${5:-8000}
            SERVER_ADDR=${6:-127.0.0.1}
            # Copy versions.json to site-internal directory if it exists
            if [[ -f "docs/versions.json" ]]; then
                mkdir -p site-internal
                cp "docs/versions.json" "site-internal/"
                echo "Copied versions.json to site-internal"
            fi
            # Regular serve without versions
            echo "Starting internal documentation server on $SERVER_ADDR:$PORT..."
            python -m mkdocs serve -f mkdocs.internal.yml -a $SERVER_ADDR:$PORT
        fi
    elif [ "$4" == "version" ]; then
        # Handle versioning
        echo "Creating versioned documentation..."
        VERSION=${5:-"latest"}
        ALIAS=${6:-"latest"}
        UPDATE_ALIAS=${7:-"true"}
        
        # Build the docs
        python -m mkdocs build -f mkdocs.internal.yml -d $OUTPUT_DIR
        
        # Deploy the version
        if [ "$UPDATE_ALIAS" == "true" ]; then
            mike deploy --push --update-aliases $VERSION $ALIAS
        else
            mike deploy --push $VERSION
        fi
    else
        # Regular build
        python -m mkdocs build -f mkdocs.internal.yml -d $OUTPUT_DIR
    fi
elif [ "$BUILD_TYPE" == "external" ]; then
    echo "Building external documentation..."
    if [ "$4" == "serve" ]; then
        PORT=${5:-8001}
        SERVER_ADDR=${6:-127.0.0.1}
        echo "Starting external documentation server on $SERVER_ADDR:$PORT..."
        python -m mkdocs serve -f mkdocs.yml -a $SERVER_ADDR:$PORT
    else
        python -m mkdocs build -f mkdocs.yml -d $OUTPUT_DIR
    fi
else
    echo "Unknown build type: $BUILD_TYPE"
    echo "Usage: $0 [external|internal] [output_directory] [environment] [serve|version] [port] [server_address]"
    echo ""
    echo "Examples:"
    echo "  $0 external site development serve 8001                # External docs on 127.0.0.1:8001"
    echo "  $0 internal site-internal development serve 8000       # Internal docs on 127.0.0.1:8000"
    echo "  $0 external site production serve 8001 127.0.0.1       # External docs on 127.0.0.1:8001"
    echo "  $0 internal site-internal production serve 8000 127.0.0.1 # Internal docs on 127.0.0.1:8000"
    exit 1
fi

echo "Documentation built successfully in $OUTPUT_DIR"

# Note: The serve functionality is now handled directly by the mkdocs serve command above
# This section is kept for backward compatibility with the older approach
if [ "$4" == "serve" ] && [ "$USE_PYTHON_SERVER" == "true" ]; then
    PORT=${5:-5000}
    SERVER_ADDR=${6:-127.0.0.1}
    echo "Serving documentation at http://$SERVER_ADDR:$PORT using Python's HTTP server"
    cd $OUTPUT_DIR && python -m http.server $PORT --bind $SERVER_ADDR
fi
